import scalariform.formatter.preferences._

name := "scala-migrations"

description := "Database migrations written in Scala."

homepage := Some(url("http://opensource.imageworks.com/?p=scalamigrations"))

startYear := Some(2008)

organization := "com.imageworks.scala-migrations"

organizationName := "Sony Pictures Imageworks"

organizationHomepage := Some(url("http://www.imageworks.com/"))

licenses += "New BSD License" -> url("http://opensource.org/licenses/BSD-3-Clause")

version := "1.1.2-SNAPSHOT"

scalaVersion := "2.10.2"

// For a single major Scala release, e.g. 2.x.y, include at most one
// Scala release candidate in crossScalaVersions, e.g. "2.x.y-RC3".
// When the Scala final release has been published, then replace the
// release candidate with the Scala final release.
crossScalaVersions := Seq("2.9.0", "2.9.0-1",
                          "2.9.1", "2.9.1-1",
                          "2.9.2", "2.9.3",
                          "2.10.2",
                          "2.11.0-M5")

// Increase warnings generated by the Scala compiler.
//
// For Scala 2.10 and greater, pass "-feature" to scalac to enable
// warnings for use of features that should be explicitly imported,
// e.g. "import scala.language.implicitConversions" to enable implicit
// conversions.  However, since Scala Migrations uses implicit
// conversions and to maintain source compatibility so that separate
// branches are not needed, pass "-language:implicitConversions" so
// that "-feature" can be used without generating spurious warnings.
scalacOptions <++= scalaVersion map { v: String =>
  val options1 = "-deprecation" :: "-unchecked" :: Nil
  if (v.startsWith("2.9.0")) {
    options1
  }
  else {
    val options2 = "-Xlint" :: options1
    if (v.startsWith("2.9"))
      options2
    else
      "-feature" :: "-language:implicitConversions" :: options2
  }
}

libraryDependencies ++= Seq(
  "com.novocode" % "junit-interface" % "0.10-M4" % "test",
  "log4jdbc" % "log4jdbc" % "1.1" from "http://log4jdbc.googlecode.com/files/log4jdbc4-1.1.jar",
  "mysql" % "mysql-connector-java" % "[5.1.0,5.2)" % "test",
  "org.apache.derby" % "derby" % "[10.5.3.0,11.0)" % "test",
  "org.hamcrest" % "hamcrest-core" % "1.3" % "test",
  "org.jmock" % "jmock-junit4" % "[2.5.1,3.0)" % "test",
  "org.slf4j" % "slf4j-api" % "[1.5.8,2.0)",
  "org.slf4j" % "slf4j-log4j12" % "[1.5.8,2.0)" % "test",
  "com.h2database" % "h2" % "1.3.176" % "test",
  "postgresql" % "postgresql" % "9.1-901.jdbc4" % "test")


// Run unit tests serially otherwise races can occur between two
// threads checking if the 'schema_migrations' table exists and
// trying to create it.
parallelExecution in Test := false

testOptions += Tests.Argument(TestFrameworks.JUnit, "-v")

scalariformSettings

ScalariformKeys.preferences := FormattingPreferences().
  setPreference(AlignParameters, true).
  setPreference(CompactControlReadability, true).
  setPreference(DoubleIndentClassDeclaration, true)

publishMavenStyle := true

publishArtifact in Test := false

pomIncludeRepository := { _ => false }

pomExtra :=
  <developers>
    <developer>
      <id>blair</id>
      <name>Blair Zajac</name>
      <email>blair@orcaware.com</email>
    </developer>
    <developer>
      <id>jrray</id>
      <name>J. Robert Ray</name>
      <email>jrobertray@gmail.com</email>
    </developer>
  </developers>
  <scm>
    <connection>scm:git:git@github.com:imageworks/scala-migrations.git</connection>
    <developerConnection>scm:git:git@github.com:imageworks/scala-migrations.git</developerConnection>
    <url>git@github.com:imageworks/scala-migrations.git</url>
  </scm>

// Do not include log4jdbc as a dependency.
pomPostProcess := { (node: scala.xml.Node) =>
  val rewriteRule =
    new scala.xml.transform.RewriteRule {
      override def transform(n: scala.xml.Node): scala.xml.NodeSeq = {
        val name = n.nameToString(new StringBuilder).toString
        if (   (name == "dependency")
            && ((n \ "groupId").text == "log4jdbc")
            && ((n \ "artifactId").text == "log4jdbc")) {
          scala.xml.NodeSeq.Empty
        }
        else {
          n
        }
      }
    }
  val transformer = new scala.xml.transform.RuleTransformer(rewriteRule)
  transformer.transform(node)(0)
}

publishTo <<= version { (v: String) =>
  val nexus = "https://oss.sonatype.org/"
  if (v.trim.endsWith("SNAPSHOT"))
    Some("snapshots" at nexus + "content/repositories/snapshots")
  else
    Some("releases"  at nexus + "service/local/staging/deploy/maven2")
}

useGpg := true

useGpgAgent := true
